{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/components/seo.tsx","webpack:///./node_modules/core-js/modules/es6.string.small.js","webpack:///./node_modules/core-js/modules/_string-html.js"],"names":["Post","styled","article","withConfig","displayName","componentId","props","theme","media","small","_templateObject","large","_templateObject2","Image","div","Content","section","maxWidth","PostContent","PostTitle","h2","PostDate","time","colors","accent","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_5__","_components_seo__WEBPACK_IMPORTED_MODULE_6__","title","description","data","allMarkdownRemark","edges","map","_ref","node","key","id","frontmatter","image","gatsby_image__WEBPACK_IMPORTED_MODULE_7___default","a","fluid","childImageSharp","gatsby__WEBPACK_IMPORTED_MODULE_4__","to","fields","slug","date","excerpt","query","SEO","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_3__","detailsQuery","render","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","__webpack_require__","createHTML","this","$export","fails","defined","quot","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split"],"mappings":"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","file":"component---src-pages-index-tsx-9b87cd06154404c60770.js","sourcesContent":["import * as React from \"react\"\nimport styled from \"styled-components\";\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Img from \"gatsby-image\"\n\nconst Post = styled.article`\n    display: flex;\n    flex-direction: column;\n    margin: 0 20px;\n    margin-bottom: 20px;\n    background: #fff;\n    box-shadow: 8px 14px 38px rgba(39,44,49,.06),1px 3px 8px rgba(39,44,49,.03);\n    transition: all .5s ease;    \n    border-radius: 7px;\n    ${(props) => props.theme.media.small`\n      max-height: 400px;\n      flex-direction: row;\n    `};\n    ${(props) => props.theme.media.large`\n      margin-left: auto;\n      margin-right: auto;\n    `}\n\n`;\n\nconst Image = styled.div`\n    margin-right: 30px;\n    flex: 2;\n    img {\n      margin-bottom: 0;\n    }\n`;\n\nconst Content = styled.section`\n    max-width: ${(props) => props.theme.maxWidth}px;\n    margin: auto;\n`;\n\nconst PostContent = styled.div`\n    flex: 1;\n    padding: 10px;\n    h2 a {\n      color: #000;\n    }\n`;\n\nconst PostTitle = styled.h2`\n  margin-bottom: .1em;   \n`\n\nconst PostDate = styled.time`\n  font-size: .8em;\n  color: ${(props) => props.theme.colors.accent};\n`;\n\ninterface IIndexProps {\n    data: {\n        allMarkdownRemark: any;\n    }\n}\n\nexport default (props: IIndexProps) => (\n    <Layout>\n    <SEO title=\"Index\" description=\"This is a description\" />\n    <Content>\n    {props.data.allMarkdownRemark.edges.map(({ node }) => (\n        <Post key={node.id}>\n        { node.frontmatter.image ?\n          <Image>\n              <Img fluid={node.frontmatter.image.childImageSharp.fluid}  />\n          </Image>\n        : null }\n            <PostContent>\n                <PostTitle>\n                    <Link to={node.fields.slug}>\n                    {node.frontmatter.title}\n                    </Link>\n                </PostTitle>\n                <PostDate>{node.frontmatter.date}</PostDate>\n                <p>{node.excerpt}</p>\n            </PostContent>\n        </Post>\n    ))}\n    </Content>\n    </Layout>\n);\n\nexport const query = graphql`\n    query {\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n            totalCount\n            edges {\n                node {\n                    id\n                    frontmatter {\n                        title\n                        date(formatString: \"Y-MM-DD\")\n                        image {\n                            childImageSharp {\n                                fluid(maxHeight: 400) {\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }                    \n                    }\n                    fields {\n                        slug\n                    }               \n                    excerpt\n                }\n            }\n        }\n    }\n`\n","import * as React from \"react\"\nimport Helmet from \"react-helmet\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n"],"sourceRoot":""}